/*
Pratica 1: Implementacao de um Middleware tolerante a falha para alocacao dinamica de memoria
Alunos: Ellen Priscila Borges Oliveira RA 69554
        Juliana de Paula Nader RA 86301
*/

#define _GNU_SOURCE
#include <stdio.h>
#include <stdlib.h>
#include <dlfcn.h>


typedef struct no_lista{
  void * p_fun;
  size_t size;
  struct no_lista *ant; /* quarda a posicao do elemento anterior na lista */
  struct no_lista *prox; /* quarda a posicao do proximo elemento na lista */
}NO;

typedef struct Lista{
    NO* primeiro;
    NO* ultimo;
    int tamanho;     /*guarda o tamanho da lista*/
}LDE;

/*----------------- Funcoes para a Lista encadeada-----------------*/
LDE *lista;

LDE* InicializaLista(){
  LDE *L  = malloc(sizeof(LDE));
  L->primeiro = NULL;
  L->ultimo = NULL;
  L->tamanho = 0;
  return L;

}



NO* Busca(LDE *L, void * p_fun){

    NO *temp;
    for (temp = L->primeiro; temp!=NULL;temp = temp->prox) {
        if (temp->p_fun == p_fun) {
          return temp;
        }
    }
    return NULL; /* não achou o no */
}


//insere um novo no no final da lista
void InsereNO(LDE *L, void * p_fun, size_t size){
    NO *novo = malloc(sizeof(NO));
    novo->p_fun = p_fun;
    novo->size = size;
    novo->ant = NULL;
    novo->prox = NULL;
    if(novo!=NULL){

	    //se a lista esta vazia
	    if(L->primeiro==NULL && L->ultimo==NULL){
		L->primeiro = novo;
		L->ultimo = novo;
		L->tamanho++;

	    }
	    //caso a lista possua um ou mais elementos
	    else{
		if(Busca(L,p_fun)==NULL){
		    novo->prox = NULL;
		    novo->ant= L->ultimo;
		    L->ultimo->prox = novo;
		    L->ultimo = novo;
		    L->tamanho++;

		}
    	     }
     }
}

void RemoveNO(LDE *L, void * p_fun){
    if(L->tamanho>0){ //se a lista esta vazia

	    NO* temp = Busca(L,p_fun);
	    if(temp!=NULL){
		//remove começo
		if(temp->ant==NULL){
		    L->primeiro = temp->prox;
		    L->primeiro->ant = NULL;

		}//remove final
		else if(temp->prox==NULL){
		    L->ultimo= temp->ant;
		    temp->ant->prox=NULL;
		    L->tamanho--;

		}//no meio
		else {
		    temp->ant->prox = temp->prox;
		    temp->prox->ant = temp->ant;

		}
		L->tamanho--;
		temp->prox = NULL;
		temp->ant= NULL;
		free(temp);

	   }
     }

}

void DestroiLista(LDE* L){
    NO* no = L->primeiro;
    NO* temp;

    while (no != NULL) {
        temp = no->prox;
        free(no);
        no = temp;
    }
    free(L);
}


void Imprime(NO* temp){

    if(temp!=NULL){
        printf("Endereco = [%p]\n", temp->p_fun);
        printf("Tamanho = [%d]\n", (int)temp->size);
        Imprime(temp->prox);
    }
}

void ImprimeLista (LDE *L) {
    if(L!=NULL){
        Imprime(L->primeiro);
    }
}
/*----------------- Funcoes para o mid-----------------*/


void *(*_malloc)(size_t) = NULL;

void *malloc(size_t size){

	if (!_malloc)
		_malloc = dlsym(RTLD_NEXT, "malloc");

    void *p = _malloc(size);
	fprintf(stderr, "WRAPPER: malloc(%d) = %p\n",(int)size, p);


	InsereNO(lista,p,size);


	return p;
}

void * (*_calloc)(size_t, size_t) = NULL;

void *calloc(size_t nmemb, size_t size){
	if (!_calloc)
		_calloc = dlsym(RTLD_NEXT, "calloc");

    void *p = _calloc(nmemb, size);
	fprintf(stderr, "WRAPPER: calloc(%d) = %p\n",(int)size, p);


	InsereNO(lista,p,size);
	return p;

}


void * (*_realloc)(void *, size_t) = NULL;

void *realloc(void *ptr, size_t size){
	if (!_realloc)
		_realloc = dlsym(RTLD_NEXT, "realloc");

    void *p = _realloc(ptr, size);
	fprintf(stderr, "WRAPPER: realloc(%d) = %p\n",(int)size, p);


	InsereNO(lista,p,size);
	return p;


}



void (*_free)(void *) = NULL;

void free(void *ptr){
	if(lista!=NULL && lista->tamanho>0){
		if(!_free){
			_free = dlsym (RTLD_NEXT,"free");
			 RemoveNO(lista,ptr);

        }
    }
}



int main(){
    lista = InicializaLista();

return 0;

}
